[{"title":"javascript闭包揭秘","date":"2017-03-05T13:46:47.000Z","path":"2017/03/05/javascript闭包揭秘/","text":"闭包是在学习javascript的过程中不可规避的一道屏障。掌握了闭包，才有可能从初级想中级迈进。自从学习js以来，我也看了许多篇关于闭包的文章，但是一致没能完全理解闭包到底是什么？它显得如此神秘，像是深林中的蓝精灵。在经过无数次的实验和查找书籍之后，终于对闭包有了一个较为清晰的理解。 1. 什么是闭包 就像一万个读者心中有一万个法姆雷特，对于闭包的理解，大家也各不相同。大致可以分为两种意见： 在函数A内创建函数B，就形成了闭包 创建一个函数就形成了闭包 我个人是比较倾向于第二种说法的。 在《Javascript高级程序设计》中关于闭包的解释提到： 闭包是指有权访问另一个函数作用于中变量的函数。创建函数的常见方式，就是在一个函数内部创建另一个函数。 在《你不知道的Javascript》中关于闭包是这样说的： 当函数可以记住并访问所在的词法作用域时，就产生了闭包 什么时词法作用域？简单的说，词法作用域就是定义在词法阶段的作用域（好像时废话），它决定了你能访问哪些变量。当然也有办法可以欺骗词法作用域，那就是使用with或者eval。也正是由于这样做时候作用域混乱，会导致各种不易发现的bug，因此各大规范都不建议使用with和eval。这中题外话就按住不表。 2. 闭包的本质 上面两种解释，都提到了可访问的变量。而函数的可访问变量由词法作用域链决定。所以，简单的说：闭包的本质就是词法作用域链查找变量的过程。理解闭包就是理解词法作用域链。那么，词法作用域链又是什么？既然时链，那么必然是一个类似链表的结构。假设有函数A，函数A内部有函数B。那么函数B的作用域链为： B -&gt; A -&gt; Global 函数A的作用域链为： A -&gt; Global 3. 动手看看 来看个小实验：可以看到右侧的Scope部分的作用域链： Local -&gt; Global，其中Local包括几个属性：B, a_a, a_b, this，而Global指向window 函数B的作用域链为: Local -&gt; A -&gt; Global，可以看到在函数B种包含了函数A的变量a_b。 从上面的实验可以看出： 词法作用域链是从函数本身开始，向上级直到指向Global为止 词法作用域内的可访问变量包括参数，变量和this 再来看另一个经典的实验12345678910function A()&#123; var result = [] for(var i=0;i&lt;5;i++) &#123; result[i] = function()&#123; console.log(i) &#125; &#125; return result;&#125;var a = A(); 大家都知道全都会输出5。让我们从作用域链的角度来解析试下原因。a[0]~a[4]为匿名函数，Local作用域内没有可访问的变量；上级作用域为函数A，可访问的变量为result和i。当执行a0时，函数A已经运行完毕，由于循环，i已经赋值为5，因此输出为5. 要解决问题也很简单，将i引入到匿名函数中即可。从上一个实验的结论2中我们知道，作用域中可访问的变量有参数，变量和this。这里的变量指的是函数内部定义的局部变量，因此不可以用来解决这个问题，那么智能使用参数和this了。 上图中使用bind来强制改变this；从而将i引入，而最后的输出和预想的略有不同，应该是bind的机制要求this必须为object（无责任猜想），或者有哪位大大可以解释一下的？ 这里使用了匿名函数（alias： nousB）将i引入。同时可以知道，这里的作用域链其实是被改变了的，在匿名函数与函数A之间多了一个作用域nousB，而i实际是在nousB的作用域内。 4. 结语 闭包在javascript的使用中颇为频繁，在各种库与框架中都有出现。它帮我们解决了很多问题，但它本身也并不是完美的：由于作用域链的保存也是需要占用空间的，因此，在大量使用闭包的时候会有内存占用偏高的情况；同时，若作用域链过长，而查找的变量在较外层甚至是Global上时，查找效率较慢。 闭包虽好，可不要贪心哟","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"}]},{"title":"Hello World","date":"2017-01-09T12:50:09.188Z","path":"2017/01/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]